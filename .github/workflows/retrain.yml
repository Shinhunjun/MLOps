name: Model Retraining with Webhook

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      trigger_reason:
        description: "Reason for triggering retraining"
        required: false
        default: "Manual trigger"
      data_count:
        description: "Number of data points collected"
        required: false
        default: "0"
      timestamp:
        description: "Timestamp of trigger"
        required: false
        default: "N/A"
  repository_dispatch: # Allows webhook triggering
    types: [retrain-model]
  schedule:
    - cron: "0 8 * * *" # Runs every day at 8:00 AM UTC

jobs:
  retrain:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11" # Based on the user's venv

      - name: Install dependencies
        run: pip install -r FastAPI_Labs/requirements.txt

      - name: Check for new data
        id: check_data
        run: |
          # Check new_data folder and count.json
          if [ -d "FastAPI_Labs/new_data" ] && [ -f "FastAPI_Labs/new_data/count.json" ]; then
            # Check current sub_set from count.json (use previous batch data)
            SUB_SET_COUNT=$(python3 -c "import json; data=json.load(open('FastAPI_Labs/new_data/count.json')); print(data['sub_set_count']-1)")
            SUB_SET_DIR="FastAPI_Labs/new_data/sub_set_${SUB_SET_COUNT}"
            
            if [ -d "$SUB_SET_DIR" ] && [ "$(ls -A "$SUB_SET_DIR")" ]; then
              echo "data_exists=true" >> $GITHUB_OUTPUT
              echo "data_count=$(ls "$SUB_SET_DIR"/*.png "$SUB_SET_DIR"/*.jpg 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
              echo "data_source=$SUB_SET_DIR" >> $GITHUB_OUTPUT
              echo "sub_set=sub_set_${SUB_SET_COUNT}" >> $GITHUB_OUTPUT
              echo "📊 Found sub_set_${SUB_SET_COUNT} with ${{ steps.check_data.outputs.data_count }} data points"
            else
              echo "data_exists=false" >> $GITHUB_OUTPUT
              echo "data_count=0" >> $GITHUB_OUTPUT
              echo "data_source=none" >> $GITHUB_OUTPUT
              echo "❌ No data found in $SUB_SET_DIR"
            fi
          else
            echo "data_exists=false" >> $GITHUB_OUTPUT
            echo "data_count=0" >> $GITHUB_OUTPUT
            echo "data_source=none" >> $GITHUB_OUTPUT
            echo "❌ new_data folder or count.json not found"
          fi

      - name: Download additional data (if needed)
        if: steps.check_data.outputs.data_exists == 'true'
        run: |
          echo "📊 Found ${{ steps.check_data.outputs.data_count }} new data points"
          echo "🔄 Starting model retraining with new data..."

      - name: Run model retraining
        if: steps.check_data.outputs.data_exists == 'true'
        run: |
          cd FastAPI_Labs
          python src/retrain_with_new_data.py

      - name: Commit and push changes
        if: steps.check_data.outputs.data_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A # Stage all changes, including new archived data and the updated model
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "feat(mlops): Automatically retrain models with new data"
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          fi

      - name: Notify completion
        if: steps.check_data.outputs.data_exists == 'true'
        run: |
          echo "✅ Model retraining completed!"
          echo "📝 Please restart the local server or click the 'Auto Update Model' button."
          echo "🔄 Or the auto updater will load the new model in 10 minutes."
